[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "logistics-document-generator"
version = "2.1.0"
authors = [
    {name = "Logistics Team", email = "logistics@company.com"},
]
description = "A secure, high-performance logistics document generator for shipping placards"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Text Processing :: Markup",
]
keywords = ["logistics", "shipping", "placards", "documents", "excel", "word"]

dependencies = [
    "pandas>=2.0.0",
    "python-docx>=1.0.0",
    "openpyxl>=3.0.0",
    "lxml>=4.9.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.1",
    "typing-extensions>=4.0.0",
    "pathlib2>=2.3.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
gui = [
    "dearpygui>=1.11.1",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
security = [
    "cryptography>=42.0.0",
]

[project.scripts]
placard-generator = "logistics_generator.cli:main"
placard-gui = "logistics_generator.gui:main"

[project.urls]
"Homepage" = "https://github.com/your-company/logistics-document-generator"
"Bug Reports" = "https://github.com/your-company/logistics-document-generator/issues"
"Source" = "https://github.com/your-company/logistics-document-generator"
"Documentation" = "https://github.com/your-company/logistics-document-generator/wiki"

[tool.setuptools.packages.find]
where = ["."]
include = ["logistics_generator*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
logistics_generator = [
    "templates/*.docx",
    "templates/*.doc",
    "*.json",
    "*.yaml",
    "*.yml",
    "*.txt",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=logistics_generator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["logistics_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@(abc\\.)?abstractmethod",
] 